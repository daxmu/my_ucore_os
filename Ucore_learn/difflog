diff -r labcodes/lab1/boot/bootmain.c labcodes_answer/lab1_result/boot/bootmain.c
32,34c32,33
< 
< #define SECTSIZE        512
< #define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
---
> unsigned int    SECTSIZE  =      512 ;
> struct elfhdr * ELFHDR    =      ((struct elfhdr *)0x10000) ;     // scratch space
diff -r labcodes/lab1/kern/debug/kdebug.c labcodes_answer/lab1_result/kern/debug/kdebug.c
304a305,318
>     uint32_t ebp = read_ebp(), eip = read_eip();
> 
>     int i, j;
>     for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
>         cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
>         uint32_t *args = (uint32_t *)ebp + 2;
>         for (j = 0; j < 4; j ++) {
>             cprintf("0x%08x ", args[j]);
>         }
>         cprintf("\n");
>         print_debuginfo(eip - 1);
>         eip = ((uint32_t *)ebp)[1];
>         ebp = ((uint32_t *)ebp)[0];
>     }
diff -r labcodes/lab1/kern/driver/console.c labcodes_answer/lab1_result/kern/driver/console.c
55,63d54
< // 显示器初始化，CGA 是 Color Graphics Adapter 的缩写
< // CGA显存按照下面的方式映射：
< //   -- 0xB0000 - 0xB7777 单色字符模式
< //   -- 0xB8000 - 0xBFFFF 彩色字符模式及 CGA 兼容图形模式
< // 6845芯片是IBM PC中的视频控制器
< // CPU通过IO地址0x3B4-0x3B5来驱动6845控制单色显示，通过IO地址0x3D4-0x3D5来控制彩色显示。
< //    -- 数据寄存器 映射 到 端口 0x3D5或0x3B5 
< //    -- 索引寄存器 0x3D4或0x3B4,决定在数据寄存器中的数据表示什么。
< 
64a56
> 
67,75c59,67
<     volatile uint16_t *cp = (uint16_t *)CGA_BUF;   //CGA_BUF: 0xB8000 (彩色显示的显存物理基址)
<     uint16_t was = *cp;                                            //保存当前显存0xB8000处的值
<     *cp = (uint16_t) 0xA55A;                                   // 给这个地址随便写个值，看看能否再读出同样的值
<     if (*cp != 0xA55A) {                                            // 如果读不出来，说明没有这块显存，即是单显配置
<         cp = (uint16_t*)MONO_BUF;                         //设置为单显的显存基址 MONO_BUF： 0xB0000
<         addr_6845 = MONO_BASE;                           //设置为单显控制的IO地址，MONO_BASE: 0x3B4
<     } else {                                                                // 如果读出来了，有这块显存，即是彩显配置
<         *cp = was;                                                      //还原原来显存位置的值
<         addr_6845 = CGA_BASE;                               // 设置为彩显控制的IO地址，CGA_BASE: 0x3D4 
---
>     volatile uint16_t *cp = (uint16_t *)CGA_BUF;
>     uint16_t was = *cp;
>     *cp = (uint16_t) 0xA55A;
>     if (*cp != 0xA55A) {
>         cp = (uint16_t*)MONO_BUF;
>         addr_6845 = MONO_BASE;
>     } else {
>         *cp = was;
>         addr_6845 = CGA_BASE;
79,81d70
<     // 6845索引寄存器的index 0x0E（及十进制的14）== 光标位置(高位)
<     // 6845索引寄存器的index 0x0F（及十进制的15）== 光标位置(低位)
<     // 6845 reg 15 : Cursor Address (Low Byte)
83,84c72,73
<     outb(addr_6845, 14);                                        
<     pos = inb(addr_6845 + 1) << 8;                       //读出了光标位置(高位)
---
>     outb(addr_6845, 14);
>     pos = inb(addr_6845 + 1) << 8;
86c75
<     pos |= inb(addr_6845 + 1);                             //读出了光标位置(低位)
---
>     pos |= inb(addr_6845 + 1);
88,89c77,78
<     crt_buf = (uint16_t*) cp;                                  //crt_buf是CGA显存起始地址
<     crt_pos = pos;                                                  //crt_pos是CGA当前光标位置
---
>     crt_buf = (uint16_t*) cp;
>     crt_pos = pos;
diff -r labcodes/lab1/kern/init/init.c labcodes_answer/lab1_result/kern/init/init.c
12c12
< int kern_init(void) __attribute__((noreturn));
---
> void kern_init(void) __attribute__((noreturn));
16,17c16,17
< int
< kern_init(void) {
---
> void
> kern_init(void){
40c40
<     //lab1_switch_test();
---
>     lab1_switch_test();
86a87,93
> 	asm volatile (
> 	    "sub $0x8, %%esp \n"
> 	    "int %0 \n"
> 	    "movl %%ebp, %%esp"
> 	    : 
> 	    : "i"(T_SWITCH_TOU)
> 	);
91a99,104
> 	asm volatile (
> 	    "int %0 \n"
> 	    "movl %%ebp, %%esp \n"
> 	    : 
> 	    : "i"(T_SWITCH_TOK)
> 	);
diff -r labcodes/lab1/kern/trap/trap.c labcodes_answer/lab1_result/kern/trap/trap.c
11c11
< 
---
> #include <string.h>
48a49,57
>     extern uintptr_t __vectors[];
>     int i;
>     for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
>         SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
>     }
> 	// set for switch from user to kernel
>     SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
> 	// load the IDT
>     lidt(&idt_pd);
136a146,148
> /* temporary trapframe or pointer to trapframe */
> struct trapframe switchk2u, *switchu2k;
> 
149a162,165
>         ticks ++;
>         if (ticks % TICK_NUM == 0) {
>             print_ticks();
>         }
160a177,191
>         if (tf->tf_cs != USER_CS) {
>             switchk2u = *tf;
>             switchk2u.tf_cs = USER_CS;
>             switchk2u.tf_ds = switchk2u.tf_es = switchk2u.tf_ss = USER_DS;
>             switchk2u.tf_esp = (uint32_t)tf + sizeof(struct trapframe) - 8;
> 		
>             // set eflags, make sure ucore can use io under user mode.
>             // if CPL > IOPL, then cpu will generate a general protection.
>             switchk2u.tf_eflags |= FL_IOPL_MASK;
> 		
>             // set temporary stack
>             // then iret will jump to the right stack
>             *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
>         }
>         break;
162c193,200
<         panic("T_SWITCH_** ??\n");
---
>         if (tf->tf_cs != KERNEL_CS) {
>             tf->tf_cs = KERNEL_CS;
>             tf->tf_ds = tf->tf_es = KERNEL_DS;
>             tf->tf_eflags &= ~FL_IOPL_MASK;
>             switchu2k = (struct trapframe *)(tf->tf_esp - (sizeof(struct trapframe) - 8));
>             memmove(switchu2k, tf, sizeof(struct trapframe) - 8);
>             *((uint32_t *)tf - 1) = (uint32_t)switchu2k;
>         }
diff -r labcodes/lab1/Makefile labcodes_answer/lab1_result/Makefile
7,8c7
< #need llvm/cang-3.5+
< #USELLVM := 1
---
> 
31,32d29
< 	elif which qemu > /dev/null; \
< 	then echo 'qemu'; exit; \
47c44
< ifndef  USELLVM
---
> 
49a47
> 
53,60d50
< else
< HOSTCC		:= clang
< HOSTCFLAGS	:= -g -Wall -O2
< CC		:= clang
< CFLAGS	:= -fno-builtin -Wall -g -m32 -mno-sse -nostdinc $(DEFS)
< CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
< endif
< 
164a155
> 	@$(OBJDUMP) -t $(call objfile,bootblock) | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,bootblock)
206c197
< 
---
> all: $(TARGETS)
209a201,209
> lab1-mon: $(UCOREIMG)
> 	$(V)$(TERMINAL) -e "$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -monitor stdio -hda $< -serial null"
> 	$(V)sleep 2
> 	$(V)$(TERMINAL) -e "gdb -q -x tools/lab1init"
> debug-mon: $(UCOREIMG)
> #	$(V)$(QEMU) -S -s -monitor stdio -hda $< -serial null &
> 	$(V)$(TERMINAL) -e "$(QEMU) -S -s -monitor stdio -hda $< -serial null"
> 	$(V)sleep 2
> 	$(V)$(TERMINAL) -e "gdb -q -x tools/moninit"
211c211
< 	$(V)$(QEMU)  -no-reboot -monitor stdio -hda $< -serial null
---
> 	$(V)$(QEMU) -monitor stdio -hda $< -serial null
213,215c213,214
< 	$(V)$(QEMU) -no-reboot -parallel stdio -hda $< -serial null
< log: $(UCOREIMG)
< 	$(V)$(QEMU) -no-reboot -d int,cpu_reset  -D q.log -parallel stdio -hda $< -serial null
---
> 	$(V)$(QEMU) -parallel stdio -hda $< -serial null
> 
217c216
< 	$(V)$(QEMU)   -no-reboot -serial mon:stdio -hda $< -nographic
---
> 	$(V)$(QEMU) -serial mon:stdio -hda $< -nographic
218a218,219
> gdb: $(UCOREIMG)
> 	$(V)$(QEMU) -S -s -parallel stdio -hda $< -serial null
222c223
< 	$(V)$(TERMINAL) -e "gdb -q -tui -x tools/gdbinit"
---
> 	$(V)$(TERMINAL)  -e "cgdb -q -x tools/gdbinit"
249c250
< .PHONY: clean dist-clean handin packall tags
---
> .PHONY: clean dist-clean handin packall
251c252
< 	$(V)$(RM) $(GRADE_GDB_IN) $(GRADE_QEMU_OUT) cscope* tags
---
> 	$(V)$(RM) $(GRADE_GDB_IN) $(GRADE_QEMU_OUT)
264,269d264
< tags:
< 	@echo TAGS ALL
< 	$(V)rm -f cscope.files cscope.in.out cscope.out cscope.po.out tags
< 	$(V)find . -type f -name "*.[chS]" >cscope.files
< 	$(V)cscope -bq 
< 	$(V)ctags -L cscope.files
只在 labcodes_answer/lab1_result/ 存在：report.md
diff -r labcodes/lab1/tools/gdbinit labcodes_answer/lab1_result/tools/gdbinit
1,2c1
< file bin/kernel
< set architecture i8086
---
> file obj/bootblock.o
4c3
< break kern_init
---
> break bootmain
diff -r labcodes/lab1/tools/grade.sh labcodes_answer/lab1_result/tools/grade.sh
108c108
< 		echo -e "$@" | awk '{printf "   %s\n", $0}'
---
> 		echo "$@" | awk '{printf "   %s\n", $0}'
149d148
< 		brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
153,155d151
< 			if [ "$brkaddr" != "$brkaddr_phys" ]; then
< 			    echo "break *0x$brkaddr_phys"
< 			fi
186,187d181
< 
< 	cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
353a348
> 
只在 labcodes_answer/lab1_result/tools 存在：lab1init
只在 labcodes_answer/lab1_result/tools 存在：moninit
